# Javascript
'.source.js':

  'QUnit: equal':
    'prefix': 'equal'
    'body': "assert.equal(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: deepEqual':
    'prefix': 'deepEqual'
    'body': "assert.deepEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: notDeepEqual':
    'prefix': 'notDeepEqual'
    'body': "assert.notDeepEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: notEqual':
    'prefix': 'notEqual'
    'body': "assert.notEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: notPropEqual':
    'prefix': 'notPropEqual'
    'body': "assert.notPropEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: notStrictEqual':
    'prefix': 'notStrictEqual'
    'body': "assert.notStrictEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: ok':
    'prefix': 'ok'
    'body': "assert.ok(${3:state}${1:, '${2:message}'});"

  'QUnit: notOk':
    'prefix': 'notOk'
    'body': "assert.notOk(${3:state}${1:, '${2:message}'});"

  'QUnit: propEqual':
    'prefix': 'propEqual'
    'body': "assert.propEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: strictEqual':
    'prefix': 'strictEqual'
    'body': "assert.strictEqual(${4:actual}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: throws':
    'prefix': 'throws'
    'body': "assert.throws(${4:block}, ${3:expected}${1:, '${2:message}'});"

  'QUnit: async':
    'prefix': 'async'
    'body': "assert.async();${1}"

  'QUnit: expect':
    'prefix': 'expect'
    'body': "assert.expect(${1:amount});"


# Coffee
'.source.coffee':
  'QUnit: equal':
    'prefix': 'equal'
    'body': "assert.equal ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: deepEqual':
    'prefix': 'deepEqual'
    'body': "assert.deepEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: notDeepEqual':
    'prefix': 'notDeepEqual'
    'body': "assert.notDeepEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: notEqual':
    'prefix': 'notEqual'
    'body': "assert.notEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: notPropEqual':
    'prefix': 'notPropEqual'
    'body': "assert.notPropEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: notStrictEqual':
    'prefix': 'notStrictEqual'
    'body': "assert.notStrictEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: ok':
    'prefix': 'ok'
    'body': "assert.ok ${3:state}${1:, '${2:message}'}"
    
  'QUnit: notOk':
    'prefix': 'notOk'
    'body': "assert.notOk ${3:state}${1:, '${2:message}'}"

  'QUnit: propEqual':
    'prefix': 'propEqual'
    'body': "assert.propEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: strictEqual':
    'prefix': 'strictEqual'
    'body': "assert.strictEqual ${4:actual}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: throws':
    'prefix': 'throws'
    'body': "assert.throws ${4:block}, ${3:expected}${1:, '${2:message}'}"

  'QUnit: async':
    'prefix': 'async'
    'body': "assert.async()${1}"

  'QUnit: expect':
    'prefix': 'expect'
    'body': "assert.expect ${1:amount}"
